
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOPERATORleftIDENTleftMESSAGEARGleftLBRACKRBRACKleftLPARENSRPARENSASSIGN BASENUMBER CARET DECNUMBER DSTRING FLTNUMBER IDENT LBRACK LPARENS MESSAGEARG OPERATOR PERIOD RBRACK RPARENS SSTRINGstatement_list : statement_list PERIOD statement\n                       | statementstatement : exec_statement\n                  | assign_statement\n                  | return_statementreturn_statement : CARET exec_statementassign_statement : IDENT ASSIGN exec_statementexec_statement : sub_statement\n                       | argument_message\n                       | expr_message\n                       | unary_message\n                       | literalsub_statement : LPARENS exec_statement RPARENSunary_message : unary_message IDENT\n                      | literal IDENTexpr_message : exec_statement OPERATOR literal\n                     | exec_statement OPERATOR unary_messageargument_message : exec_statement message_arg_listmessage_arg_list : message_arg_list message_arg\n                         | message_argmessage_arg : MESSAGEARG sub_statement\n                    | MESSAGEARG unary_message\n                    | MESSAGEARG expr_message\n                    | MESSAGEARG literalliteral : block_literal\n                | string_literal\n                | IDENT\n                | DECNUMBERblock_literal : LBRACK statement_list RBRACK\n                      | LBRACK RBRACKstring_literal : SSTRING'
    
_lr_action_items = {'IDENT':([0,9,10,11,12,13,14,15,16,17,18,19,21,23,24,25,26,28,31,34,35,37,39,43,],[11,24,25,-27,28,28,-25,-26,-28,11,-31,11,28,28,-14,-15,28,-27,-30,25,24,24,25,-29,]),'CARET':([0,17,19,],[12,12,12,]),'LPARENS':([0,12,13,17,19,23,26,],[13,13,13,13,13,13,13,]),'DECNUMBER':([0,12,13,17,19,21,23,26,],[16,16,16,16,16,16,16,16,]),'LBRACK':([0,12,13,17,19,21,23,26,],[17,17,17,17,17,17,17,17,]),'SSTRING':([0,12,13,17,19,21,23,26,],[18,18,18,18,18,18,18,18,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,14,15,16,18,20,22,24,25,27,28,31,32,33,34,35,36,37,38,39,41,42,43,],[0,-2,-3,-4,-5,-8,-9,-10,-11,-12,-27,-25,-26,-28,-31,-18,-20,-14,-15,-6,-27,-30,-1,-19,-16,-17,-21,-22,-23,-24,-7,-13,-29,]),'PERIOD':([1,2,3,4,5,6,7,8,9,10,11,14,15,16,18,20,22,24,25,27,28,30,31,32,33,34,35,36,37,38,39,41,42,43,],[19,-2,-3,-4,-5,-8,-9,-10,-11,-12,-27,-25,-26,-28,-31,-18,-20,-14,-15,-6,-27,19,-30,-1,-19,-16,-17,-21,-22,-23,-24,-7,-13,-29,]),'RBRACK':([2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,20,22,24,25,27,28,30,31,32,33,34,35,36,37,38,39,41,42,43,],[-2,-3,-4,-5,-8,-9,-10,-11,-12,-27,-25,-26,-28,31,-31,-18,-20,-14,-15,-6,-27,43,-30,-1,-19,-16,-17,-21,-22,-23,-24,-7,-13,-29,]),'OPERATOR':([3,6,7,8,9,10,11,14,15,16,18,20,22,24,25,27,28,29,31,33,34,35,36,37,38,39,40,41,42,43,],[21,-8,-9,-10,-11,-12,-27,-25,-26,-28,-31,-18,-20,-14,-15,21,-27,21,-30,-19,-16,-17,-8,-11,-10,-12,21,21,-13,-29,]),'MESSAGEARG':([3,6,7,8,9,10,11,14,15,16,18,20,22,24,25,27,28,29,31,33,34,35,36,37,38,39,40,41,42,43,],[23,-8,-9,-10,-11,-12,-27,-25,-26,-28,-31,23,-20,-14,-15,23,-27,23,-30,-19,-16,-17,-8,-11,-10,-12,23,23,-13,-29,]),'RPARENS':([6,7,8,9,10,14,15,16,18,20,22,24,25,28,29,31,33,34,35,36,37,38,39,42,43,],[-8,-9,-10,-11,-12,-25,-26,-28,-31,-18,-20,-14,-15,-27,42,-30,-19,-16,-17,-21,-22,-23,-24,-13,-29,]),'ASSIGN':([11,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,17,],[1,30,]),'statement':([0,17,19,],[2,2,32,]),'exec_statement':([0,12,13,17,19,23,26,],[3,27,29,3,3,40,41,]),'assign_statement':([0,17,19,],[4,4,4,]),'return_statement':([0,17,19,],[5,5,5,]),'sub_statement':([0,12,13,17,19,23,26,],[6,6,6,6,6,36,6,]),'argument_message':([0,12,13,17,19,23,26,],[7,7,7,7,7,7,7,]),'expr_message':([0,12,13,17,19,23,26,],[8,8,8,8,8,38,8,]),'unary_message':([0,12,13,17,19,21,23,26,],[9,9,9,9,9,35,37,9,]),'literal':([0,12,13,17,19,21,23,26,],[10,10,10,10,10,34,39,10,]),'block_literal':([0,12,13,17,19,21,23,26,],[14,14,14,14,14,14,14,14,]),'string_literal':([0,12,13,17,19,21,23,26,],[15,15,15,15,15,15,15,15,]),'message_arg_list':([3,27,29,40,41,],[20,20,20,20,20,]),'message_arg':([3,20,27,29,40,41,],[22,33,22,22,22,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> statement_list PERIOD statement','statement_list',3,'p_statement_list','sparser.py',107),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sparser.py',108),
  ('statement -> exec_statement','statement',1,'p_statement','sparser.py',116),
  ('statement -> assign_statement','statement',1,'p_statement','sparser.py',117),
  ('statement -> return_statement','statement',1,'p_statement','sparser.py',118),
  ('return_statement -> CARET exec_statement','return_statement',2,'p_return_statement','sparser.py',122),
  ('assign_statement -> IDENT ASSIGN exec_statement','assign_statement',3,'p_assign_statement','sparser.py',126),
  ('exec_statement -> sub_statement','exec_statement',1,'p_exec_statement','sparser.py',130),
  ('exec_statement -> argument_message','exec_statement',1,'p_exec_statement','sparser.py',131),
  ('exec_statement -> expr_message','exec_statement',1,'p_exec_statement','sparser.py',132),
  ('exec_statement -> unary_message','exec_statement',1,'p_exec_statement','sparser.py',133),
  ('exec_statement -> literal','exec_statement',1,'p_exec_statement','sparser.py',134),
  ('sub_statement -> LPARENS exec_statement RPARENS','sub_statement',3,'p_sub_statement','sparser.py',138),
  ('unary_message -> unary_message IDENT','unary_message',2,'p_unary_message','sparser.py',142),
  ('unary_message -> literal IDENT','unary_message',2,'p_unary_message','sparser.py',143),
  ('expr_message -> exec_statement OPERATOR literal','expr_message',3,'p_expr_message','sparser.py',147),
  ('expr_message -> exec_statement OPERATOR unary_message','expr_message',3,'p_expr_message','sparser.py',148),
  ('argument_message -> exec_statement message_arg_list','argument_message',2,'p_argument_message','sparser.py',152),
  ('message_arg_list -> message_arg_list message_arg','message_arg_list',2,'p_message_arg_list','sparser.py',157),
  ('message_arg_list -> message_arg','message_arg_list',1,'p_message_arg_list','sparser.py',158),
  ('message_arg -> MESSAGEARG sub_statement','message_arg',2,'p_message_arg','sparser.py',167),
  ('message_arg -> MESSAGEARG unary_message','message_arg',2,'p_message_arg','sparser.py',168),
  ('message_arg -> MESSAGEARG expr_message','message_arg',2,'p_message_arg','sparser.py',169),
  ('message_arg -> MESSAGEARG literal','message_arg',2,'p_message_arg','sparser.py',170),
  ('literal -> block_literal','literal',1,'p_literal','sparser.py',175),
  ('literal -> string_literal','literal',1,'p_literal','sparser.py',176),
  ('literal -> IDENT','literal',1,'p_literal','sparser.py',177),
  ('literal -> DECNUMBER','literal',1,'p_literal','sparser.py',178),
  ('block_literal -> LBRACK statement_list RBRACK','block_literal',3,'p_block_literal','sparser.py',183),
  ('block_literal -> LBRACK RBRACK','block_literal',2,'p_block_literal','sparser.py',184),
  ('string_literal -> SSTRING','string_literal',1,'p_string_literal','sparser.py',191),
]
